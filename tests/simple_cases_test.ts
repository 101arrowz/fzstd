import { assertEquals } from "https://deno.land/std@0.103.0/testing/asserts.ts";
import * as fzstd from "../src/index.ts";

Deno.test("Decompression of 'Ok' text", () => {
  const data = [
    0x28, 0xB5, 0x2F, 0xFD, 0x24, 0x02, 0x11, 0x00, 0x00, 0x4F, 0x6B, 0x64, 0x50,
    0xA9, 0x5A
  ];
  const compressed = new Uint8Array(data);
  const decompressed = fzstd.decompress(compressed);
  const shouldBeOk = new TextDecoder().decode(decompressed);
  assertEquals("Ok", shouldBeOk);
});

Deno.test("Decompression of Lorem ipsum text", () => {
  const data = [
    0x28, 0xB5, 0x2F, 0xFD, 0x24, 0x84, 0xFD, 0x02, 0x00, 0x92, 0x07, 0x15,
    0x13, 0x90, 0x07, 0x0C, 0xC9, 0x6E, 0xBB, 0x5B, 0x93, 0x4C, 0x3E, 0x07,
    0xB5, 0xE6, 0x59, 0xF1, 0x89, 0x6B, 0x52, 0xE9, 0x83, 0xDA, 0x40, 0xF8,
    0x2D, 0xED, 0x1E, 0xA9, 0xCB, 0x01, 0x73, 0x2E, 0x97, 0x5D, 0xB9, 0x13,
    0x5B, 0x66, 0x79, 0xAF, 0x81, 0x66, 0xE0, 0x43, 0x50, 0xFB, 0x47, 0xFB,
    0x21, 0xFC, 0x89, 0x59, 0x0B, 0x3E, 0xB8, 0x8C, 0x4E, 0xC0, 0x9A, 0xAD,
    0x42, 0x15, 0x72, 0x6D, 0x26, 0x1E, 0x5A, 0xCC, 0x39, 0xC1, 0x74, 0x72,
    0xAE, 0xBD, 0xA6, 0x65, 0xF1, 0xEB, 0x2D, 0xD4, 0x8F, 0x34, 0x01, 0x01,
    0x02, 0x00, 0x3E, 0x53, 0x53, 0xB3, 0xE6, 0x19, 0xB0, 0x58, 0x5B, 0x26
  ];
  const compressed = new Uint8Array(data);
  const decompressed = fzstd.decompress(compressed);
  const shouldBeLoremIpsum = new TextDecoder().decode(decompressed);
  assertEquals("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec sem urna. Morbi mollis, massa a convallis iaculis, mauris neque.", shouldBeLoremIpsum);
});

Deno.test("Decompression of 1 000 000 nuls", () => {
  const data = [
    0x28, 0xB5, 0x2F, 0xFD, 0xA4, 0x40, 0x42, 0x0F, 0x00, 0x54, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x01, 0x00, 0xFB, 0xFF, 0x39, 0xC0, 0x02, 0x02, 0x00,
    0x10, 0x00, 0x02, 0x00, 0x10, 0x00, 0x02, 0x00, 0x10, 0x00, 0x02, 0x00,
    0x10, 0x00, 0x02, 0x00, 0x10, 0x00, 0x02, 0x00, 0x10, 0x00, 0x03, 0x12,
    0x0A, 0x00, 0xCC, 0xAE, 0xCA, 0x39
  ];
  const compressed = new Uint8Array(data);
  const decompressed : Uint8Array = fzstd.decompress(compressed);
  const arraySum = decompressed.reduce((accumulator, currentValue) => accumulator + currentValue);
  assertEquals(1_000_000, decompressed.length);
  assertEquals(0, arraySum);
});